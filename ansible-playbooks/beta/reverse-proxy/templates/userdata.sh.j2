#!/bin/bash

sudo touch /var/log/ami-install.log

# Update instance
echo "$(date '+%Y-%m-%d %T') - update system" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo yum update -y

# create swap file
echo "$(date '+%Y-%m-%d %T') - create swap file" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
sudo chmod 0600 /var/swap.1
sudo /sbin/mkswap /var/swap.1
sudo /sbin/swapon /var/swap.1

# Install Cloudwatch agent
echo "$(date '+%Y-%m-%d %T') - install CloudWatch agent" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo yum install amazon-cloudwatch-agent -y
sudo aws s3 cp s3://{{ s3_deployment_bucket }}/{{ s3_deployment_root }}/cloudwatch/cloudwatch-agent-config.json /opt/aws/amazon-cloudwatch-agent/bin/config.json
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json

echo "$(date '+%Y-%m-%d %T') - install collectd" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo yum install collectd -y

# Copy configuration files for nginx
echo "$(date '+%Y-%m-%d %T') - copy NginX config files" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo aws s3 cp s3://{{ s3_deployment_bucket }}/{{ s3_deployment_root }}/nginx/ /etc/nginx/ --recursive --exclude "*" --include "*.conf"

# Copy configuration files for nginx log rotation
echo "$(date '+%Y-%m-%d %T') - set up logrotate" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo aws s3 cp s3://{{ s3_logfile_bucket }}/{{ s3_logfile_root }}/nginx/nginx /etc/logrotate.d/nginx

# install all tools required for nginx compilation
# please update the version for nginx to the lastest stable version
echo "$(date '+%Y-%m-%d %T') - prepare compile environment" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo yum install -y git
sudo yum install -y pcre-devel zlib-devel openssl-devel gcc gcc-c++ make
sudo yum install -y system-rpm-config
sudo yum install -y wget openssl-devel libxml2-devel libxslt-devel gd-devel
sudo yum install -y perl-ExtUtils-Embed GeoIP-devel gperftools gperftools-devel libatomic_ops-devel

echo "$(date '+%Y-%m-%d %T') - compile NginX" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo curl -O http://nginx.org/download/nginx-1.25.4.tar.gz
sudo tar -xvf nginx-1.25.4.tar.gz
sudo rm nginx-1.25.4.tar.gz
cd nginx-1.25.4/
sudo git clone https://github.com/yaoweibin/ngx_http_substitutions_filter_module.git
sudo git clone https://github.com/openresty/echo-nginx-module.git
sudo ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx \
  --modules-path=/usr/lib64/nginx/modules \
  --conf-path=/etc/nginx/nginx.conf \
  --error-log-path=/var/log/nginx/error.log \
  --http-log-path=/var/log/nginx/access.log \
  --http-client-body-temp-path=/var/lib/nginx/tmp/client_body \
  --http-proxy-temp-path=/var/lib/nginx/tmp/proxy \
  --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi \
  --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi \
  --http-scgi-temp-path=/var/lib/nginx/tmp/scgi \
  --pid-path=/run/nginx.pid \
  --lock-path=/run/lock/subsys/nginx \
  --user=nginx \
  --group=nginx \
  --with-compat \
  --with-file-aio \
  --with-http_ssl_module \
  --with-http_v2_module \
  --with-http_realip_module \
  --with-stream_ssl_preread_module \
  --with-http_addition_module \
  --with-http_xslt_module=dynamic \
  --with-http_image_filter_module=dynamic \
  --with-http_geoip_module=dynamic \
  --with-http_sub_module \
  --with-http_dav_module \
  --with-http_flv_module \
  --with-http_mp4_module \
  --with-http_gunzip_module \
  --with-http_gzip_static_module \
  --with-http_random_index_module \
  --with-http_secure_link_module \
  --with-http_degradation_module \
  --with-http_slice_module \
  --with-http_stub_status_module \
  --with-http_perl_module=dynamic \
  --with-http_auth_request_module \
  --with-mail=dynamic \
  --with-mail_ssl_module \
  --with-pcre \
  --with-pcre-jit \
  --with-stream=dynamic \
  --with-stream_ssl_module \
  --with-google_perftools_module \
  --with-debug \
  --with-cc-opt='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic' \
  --with-ld-opt='-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E' \
  --add-module=./ngx_http_substitutions_filter_module \
  --add-module=./echo-nginx-module
sudo make
sudo make install

echo "$(date '+%Y-%m-%d %T') - set up NginX environment" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo groupadd nginx
sudo useradd -c "Nginx beta" -g nginx -d /var/lib/nginx -s /sbin/nologin nginx

sudo mkdir /var/lib/nginx
sudo mkdir /var/lib/nginx/tmp
sudo mkdir /var/lib/nginx/tmp/client_body
sudo mkdir /var/lib/nginx/tmp/fastcgi
sudo mkdir /var/lib/nginx/tmp/proxy
sudo mkdir /var/lib/nginx/tmp/scgi
sudo mkdir /var/lib/nginx/tmp/uwsgi

sudo chown -R nginx:nginx /var/lib/nginx/
sudo chown -R nginx:nginx /var/log/nginx/

# prepare nginx as service
echo "$(date '+%Y-%m-%d %T') - perpare NinX as service" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo cat << EOF > ~/nginx.service
[Unit]
Description=The nginx HTTP and reverse proxy server
After=network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
# Nginx will fail to start if /run/nginx.pid already exists but has the wrong
# SELinux context. This might happen when running `nginx -t` from the cmdline.
# https://bugzilla.redhat.com/show_bug.cgi?id=1268621
ExecStartPre=/usr/bin/rm -f /run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/bin/kill -s HUP $MAINPID
KillSignal=SIGQUIT
TimeoutStopSec=5
KillMode=mixed
PrivateTmp=true

[Install]
WantedBy=multi-user.target
EOF

sudo cp ~/nginx.service /lib/systemd/system/nginx.service

echo "$(date '+%Y-%m-%d %T') - start NinX" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo systemctl enable nginx
sudo systemctl start nginx

# write script files to /usr/local/sbin/
echo "$(date '+%Y-%m-%d %T') - create archiving script for logfiles" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo cat << 'EOF' > logfile_archive.sh
#!/bin/bash

# get instance id from IMDSv2
TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
InstanceId=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -v http://169.254.169.254/latest/meta-data/instance-id)

sudo aws s3 cp /var/log/nginx/ s3://{{ s3_logfile_bucket }}/{{ s3_logfile_root }}/nginx/$InstanceId/ --recursive --exclude "*" --include "*.gz"
sudo rm /var/log/nginx/*.gz

EOF

sudo mv logfile_archive.sh /usr/local/sbin/logfile_archive.sh
sudo chmod u+x /usr/local/sbin/logfile_archive.sh

# cronjob for logfile archiving
echo "$(date '+%Y-%m-%d %T') - create cron job for logfile archiving" | sudo tee -a  /var/log/ami-install.log > /dev/null
printf "%s\n" "17 0 * * * root /usr/local/sbin/logfile_archive.sh >>/usr/local/sbin/logfile_archive.out 2>&1" "" >> archivelogfiles
sudo mv archivelogfiles /etc/cron.d/
sudo chmod 0644 /etc/cron.d/archivelogfiles

cat << EOF > /var/finish-init.txt
[status]
finished = true
EOF
