#!/bin/bash

sudo touch /var/log/ami-install.log

echo "$(date '+%Y-%m-%d %T') - update system" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo dnf update -y

# create swap file
echo "$(date '+%Y-%m-%d %T') - create swap file" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
sudo chmod 0600 /var/swap.1
sudo /sbin/mkswap /var/swap.1
sudo /sbin/swapon /var/swap.1

# Install Cloudwatch agent
echo "$(date '+%Y-%m-%d %T') - install cloudwatch agent" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo dnf install amazon-cloudwatch-agent -y
echo "$(date '+%Y-%m-%d %T') - install collectd" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo dnf install collectd -y

echo "$(date '+%Y-%m-%d %T') - copy cloudwatch agent config" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo aws s3 cp s3://{{ s3_deployment_bucket  }}/{{ s3_deployment_root  }}/cloudwatch-agent-config.json /opt/aws/amazon-cloudwatch-agent/bin/config.json
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json

echo "$(date '+%Y-%m-%d %T') - install wget" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo dnf install wget -y

echo "$(date '+%Y-%m-%d %T') - install mysql" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo mkdir /packages
sudo wget -P /packages https://repo.mysql.com/mysql80-community-release-el9.rpm
sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
sudo dnf install /packages/mysql80-community-release-el9.rpm -y
sudo dnf install mysql-community-server -y

if [ ! -d "/var/lib/mysql" ]; then
  sudo mkdir /var/lib/mysql
fi
sudo chown -R mysql:mysql /var/lib/mysql/
sudo systemctl start mysqld
sudo systemctl enable mysqld

sudo systemctl status mysqld > /var/log/my.log

echo "$(date '+%Y-%m-%d %T') - secure mysql" | sudo tee -a /var/log/ami-install.log > /dev/null
temp_pw="$(sudo grep "temporary password" /var/log/mysqld.log | grep -o '[^ ]\+$')"

echo "$(date '+%Y-%m-%d %T') - create bash CIDR function" | sudo tee -a /var/log/ami-install.log > /dev/null
# get netmask form cidr
function cidr_mask() {
  ip=`echo $1 | cut -d"/" -f1`
  cidr=`echo $1 | cut -d"/" -f2`
  if [[ "cidr" == "" ]] then
    mask="255.255.255.255"
    exit 0
  fi
  value=$(( 0xffffffff ^ ((1 << (32 - $cidr)) - 1) ))
  mask=`echo "$(( (value >> 24) & 0xff )).$(( (value >> 16) & 0xff )).$(( (value >> 8) & 0xff )).$(( value & 0xff ))"`
  echo "$ip/$mask"
}

echo "$(date '+%Y-%m-%d %T') - get subnet mask from CIDR" | sudo tee -a /var/log/ami-install.log > /dev/null
admin_at=$(cidr_mask {{ network_cidr }})
rep_subnet_a=$(cidr_mask {{ subnet_db_cidr_a }})
rep_subnet_b=$(cidr_mask {{ subnet_db_cidr_b }})

# sql statements to secure the instance and setup replication user
echo "$(date '+%Y-%m-%d %T') - create mysql script" | sudo tee -a /var/log/ami-install.log > /dev/null
cat << EOF > ~/mysql_secure_installation.sql
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
CREATE USER '{{ admin_user }}'@'$admin_at' IDENTIFIED BY '{{ admin_password }}';
GRANT ALL ON *.* TO '{{ admin_user }}'@'$admin_at';
GRANT GRANT OPTION ON *.* TO '{{ admin_user }}'@'$admin_at';
CREATE USER '{{ repl_user }}'@'$rep_subnet_a' IDENTIFIED BY '{{ repl_password }}';
CREATE USER '{{ repl_user }}'@'$rep_subnet_b' IDENTIFIED BY '{{ repl_password }}';
GRANT REPLICATION CLIENT, REPLICATION SLAVE, SUPER ON *.* TO '{{ repl_user }}'@'$rep_subnet_a', '{{ repl_user }}'@'$rep_subnet_b';
CREATE USER '{{ bkup_user }}'@'$rep_subnet_a' IDENTIFIED BY '{{ bkup_password }}';
CREATE USER '{{ bkup_user }}'@'$rep_subnet_b' IDENTIFIED BY '{{ bkup_password }}';
CREATE USER '{{ bkup_user }}'@'localhost' IDENTIFIED BY '{{ bkup_password }}';
GRANT EVENT, LOCK TABLES, PROCESS, RELOAD, SELECT, SHOW DATABASES, SHOW VIEW ON *.* TO '{{ bkup_user }}'@'$rep_subnet_a', '{{ bkup_user }}'@'$rep_subnet_b', '{{ bkup_user }}'@'localhost';
FLUSH PRIVILEGES;
EOF

# setting password for root to secrets manager parameters, secure mysql
# and set administration access
echo "$(date '+%Y-%m-%d %T') - secure root account" | sudo tee -a /var/log/ami-install.log > /dev/null
mysqladmin --user=root --password=$temp_pw password '{{ root_password }}'
mysql --user=root --password='{{ root_password }}' < ~/mysql_secure_installation.sql

# remove setup file containing passwords - avoiding security risks
echo "$(date '+%Y-%m-%d %T') - remove mysql script" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo rm ~/mysql_secure_installation.sql

echo "$(date '+%Y-%m-%d %T') - prep mysql" | sudo tee -a /var/log/ami-install.log > /dev/null
sudo systemctl stop mysqld

sudo mkdir /mysql.socket
sudo chown mysql:mysql /mysql.socket

echo "$(date '+%Y-%m-%d %T') - create backup target directory" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo mkdir /data/backups
sudo chmod 0777 /data/backups

echo "$(date '+%Y-%m-%d %T') - set up backup service" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo systemctl enable daily-backup.timer
sudo systemctl start daily-backup.timer

cat << EOF > /var/finish-init.txt
[status]
finished = true
EOF
