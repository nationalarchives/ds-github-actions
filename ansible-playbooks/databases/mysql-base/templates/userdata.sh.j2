#!/bin/bash

sudo dnf update -y

# create swap file
sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
sudo chmod 0600 /var/swap.1
sudo /sbin/mkswap /var/swap.1
sudo /sbin/swapon /var/swap.1

# Install Cloudwatch agent
sudo dnf install amazon-cloudwatch-agent -y
sudo dnf install collectd -y

sudo aws s3 cp s3://{{ s3_deployment_bucket  }}/{{ s3_deployment_root  }}/cloudwatch-agent-config.json /opt/aws/amazon-cloudwatch-agent/bin/config.json
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json

sudo dnf install wget -y

sudo mkdir /packages
sudo wget -P /packages https://repo.mysql.com/mysql80-community-release-el9.rpm
sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
sudo dnf install /packages/mysql80-community-release-el9.rpm -y
sudo dnf install mysql-community-server -y
sudo systemctl start mysqld
sudo systemctl enable mysqld

temp_pw="$(sudo grep "temporary password" /var/log/mysqld.log | grep -o '[^ ]\+$')"

# get netmask form cidr
function cidr_mask() {
  ip=`echo $1 | cut -d"/" -f1`
  cidr=`echo $1 | cut -d"/" -f2`
  if [[ "cidr" == "" ]] then
    mask="255.255.255.255"
    exit 0
  fi
  value=$(( 0xffffffff ^ ((1 << (32 - $cidr)) - 1) ))
  mask=`echo "$(( (value >> 24) & 0xff )).$(( (value >> 16) & 0xff )).$(( (value >> 8) & 0xff )).$(( value & 0xff ))"`
  echo "$ip/$mask"
}

admin_at=$(cidr_mask {{ network_cidr }})
rep_subnet_a=$(cidr_mask {{ subnet_db_cidr_a }})
rep_subnet_b=$(cidr_mask {{ subnet_db_cidr_b }})
# sql statements to secure the instance and setup replication user
cat << EOF > ~/mysql_secure_installation.sql
DELETE FROM mysql.user WHERE User='';
DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
DROP DATABASE IF EXISTS test;
DELETE FROM mysql.db WHERE Db='test' OR Db='test\\_%';
CREATE USER '{{ admin_user }}'@'$at_entry' IDENTIFIED BY '{{ admin_password }}';
GRANT ALL ON *.* TO '{{ admin_user }}'@'$at_entry';
GRANT GRANT OPTION ON *.* TO '{{ admin_user }}'@'$at_entry';
CREATE USER '{{ repl_user }}'@'$rep_subnet_a' IDENTIFIED BY '{{ repl_password }}';
CREATE USER '{{ repl_user }}'@'$rep_subnet_b' IDENTIFIED BY '{{ repl_password }}';
GRANT REPLICATION SLAVE ON *.* TO 'repl'@'$rep_subnet_a', 'repl'@'$rep_subnet_b'
FLUSH PRIVILEGES;
EOF

# setting password for root to secrets manager parameters, secure mysql
# and set administration access
mysqladmin --user=root --password=$temp_pw password '{{ root_password }}'
mysql --user=root --password={{ root_password }} < ~/mysql_secure_installation.sql

# remove setup file containing passwords - avoiding security risks
sudo rm ~/mysql_secure_installation.sql

# set backup to include routines
sudo sed -i "/\[mysqld\]/a \n[mysqldump]\n" /etc/my.cnf
sudo sed -i "/\[mysqldump\]/a routines=true\n" /etc/my.cnf
# set up server - need to be manually changed when replication is used!
sudo sed -i "/\[mysqld\]/a server-id=101\n" /etc/my.cnf

sudo systemctl restart mysqld

cat << EOF > /var/finish-init.txt
[status]
finished = true
EOF
