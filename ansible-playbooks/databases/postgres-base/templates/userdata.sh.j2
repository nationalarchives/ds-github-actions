#!/bin/bash

# Update instance
sudo dnf update -y

sudo touch /var/log/var/log/ami-install.log

# create swap file
echo "$(date '+%Y-%m-%d %T') - create swap file" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo /bin/dd if=/dev/zero of=/var/swap.1 bs=1M count=1024
sudo chmod 0600 /var/swap.1
sudo /sbin/mkswap /var/swap.1
sudo /sbin/swapon /var/swap.1

# Install Cloudwatch agent
echo "$(date '+%Y-%m-%d %T') - install CloudWatch agent" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo dnf install amazon-cloudwatch-agent -y
sudo dnf install collectd -y
sudo dnf install collectd-postgresql -y
sudo aws s3 cp s3://{{ s3_deployment_bucket }}/{{ s3_deployment_root }}/cloudwatch-agent-config.json /opt/aws/amazon-cloudwatch-agent/bin/config.json
sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json

# Install and initialise PostgreSQL
echo "$(date '+%Y-%m-%d %T') - install postgres" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo dnf install postgresql15.x86_64 postgresql15-server -y
sudo postgresql-setup --initdb

sudo systemctl start postgresql
sudo systemctl enable postgresql

sudo systemctl stop postgresql

echo "$(date '+%Y-%m-%d %T') - prepare postgres" | sudo tee -a  /var/log/ami-install.log > /dev/null

# Configure PostgreSQL for replication
# the directories are specific for the version of postgres and linux 2 from AWS
#echo "$(date '+%Y-%m-%d %T') - set port and archive mode postgres" | sudo tee -a  /var/log/ami-install.log > /dev/null
#sudo sed -i "s|#listen_addresses = 'localhost'|listen_addresses = '*'|g" /var/lib/pgsql/data/postgresql.conf
#sudo sed -i "s|#full_page_writes = on|full_page_writes = on|" /var/lib/pgsql/data/postgresql.conf
#sudo sed -i "s|#archive_mode = off|archive_mode = on|" /var/lib/pgsql/data/postgresql.conf
#sudo sed -i "s|#archive_command = ''|archive_command = 'test ! -f /postgres/server/archive/%f && cp %p /postgres/server/archive/%f'|" /var/lib/pgsql/data/postgresql.conf

# Set up access to postgres from a list of IP CIDRs
# allowed separators are in IFS
echo "$(date '+%Y-%m-%d %T') - set general postgres access permission" | sudo tee -a  /var/log/ami-install.log > /dev/null
IFS=',;: ' read -a cidrs <<< '{{network_cidrs}}'
for cidr in "${cidrs[@]}"
do
    sudo sed -i "/# TYPE/a host all all $cidr scram-sha-256\n" /var/lib/pgsql/data/pg_hba.conf
done

echo "$(date '+%Y-%m-%d %T') - set replicator postgres access permission" | sudo tee -a  /var/log/ami-install.log > /dev/null
IFS=',;: ' read -a cidrs <<< '{{replica_cidrs}}'
for cidr in "${cidrs[@]}"
do
    sudo sed -i "/# TYPE/a host replication all $cidr scram-sha-256\n" /var/lib/pgsql/data/pg_hba.conf
    sudo sed -i "/# TYPE/a host all replicator $cidr scram-sha-256\n" /var/lib/pgsql/data/pg_hba.conf
done

sudo sed -i "s|peer|trust|g" /var/lib/pgsql/data/pg_hba.conf

# sql statements to secure the instance
echo "$(date '+%Y-%m-%d %T') - create secure user postgres script" | sudo tee -a  /var/log/ami-install.log > /dev/null
cat << 'EOF' > ~/secure_installation.sql
ALTER USER postgres PASSWORD '{{root_password}}';
EOF

echo "$(date '+%Y-%m-%d %T') - create postgres roles script" | sudo tee -a  /var/log/ami-install.log > /dev/null
cat << 'EOF' > ~/db_user.sql
CREATE ROLE {{admin_user}} WITH SUPERUSER LOGIN PASSWORD '{{admin_password}}';
CREATE ROLE {{repl_user}} WITH REPLICATION LOGIN PASSWORD '{{repl_password}}';
EOF

sudo systemctl start postgresql

echo "$(date '+%Y-%m-%d %T') - run secure user postgres script" | sudo tee -a  /var/log/ami-install.log > /dev/null
psql -U postgres < ~/db_user.sql
echo "$(date '+%Y-%m-%d %T') - run create postgres roles script" | sudo tee -a  /var/log/ami-install.log > /dev/null
psql -U postgres < ~/secure_installation.sql

echo "$(date '+%Y-%m-%d %T') - set all user connections to scram-sha-256" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo sed -i "s|trust|scram-sha-256|g" /var/lib/pgsql/data/pg_hba.conf
sudo sed -i "s|ident|scram-sha-256|g" /var/lib/pgsql/data/pg_hba.conf
sudo sed -i "s|md5|scram-sha-256|g" /var/lib/pgsql/data/pg_hba.conf

sudo systemctl stop postgresql

DATA_DIR="/postgres/data"
LOG_DIR="/postgres/log"
ARCHIVE_DIR="/postgres/archive"

echo "$(date '+%Y-%m-%d %T') - change service variable PGDATA" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo sed -i "s|Environment=PGDATA=.*$|Environment=PGDATA=$DATA_DIR|" /lib/systemd/system/postgresql.service

echo "$(date '+%Y-%m-%d %T') - set up postgresql.conf" | sudo tee -a  /var/log/ami-install.log > /dev/null
sudo sed -i "s|#data_directory = 'ConfigDir'|data_directory = '${DATA_DIR}'|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i "s|#log_directory = 'log'|log_directory = '${LOG_DIR}'|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i "s|log_filename = 'postgresql-%a.log'|log_filename = 'postgresql_%y%m%d_%H%M%S.log'|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i "s|logging_collector = off|logging_collector = on|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i "s|#archive_mode = off|archive_mode = on|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i "s|#archive_command = ''|archive_command = 'test ! -f ${ARCHIVE_DIR}/%f && cp %p ${ARCHIVE_DIR}/%f'|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i "s|#full_page_writes = on|full_page_writes = on|" /var/lib/pgsql/data/postgresql.conf
sudo sed -i 's|#wal_level = replica|wal_level = logical|' /var/lib/pgsql/data/postgresql.conf
sudo sed -i 's|#wal_log_hints = off|wal_log_hints = on|' /var/lib/pgsql/data/postgresql.conf
sudo sed -i 's|#max_replication_slots = 10|max_replication_slots = 10|' /var/lib/pgsql/data/postgresql.conf
sudo sed -i 's|#max_wal_senders = 10|max_wal_senders = 10|' /var/lib/pgsql/data/postgresql.conf

cat << EOF > /var/finish-init.txt
[status]
finished = true
EOF
