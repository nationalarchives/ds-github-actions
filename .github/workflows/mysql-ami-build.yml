---
name: Build MySQL AMI
run-name: Build MySQL AMI for ${{ inputs.account }} by @${{ github.actor }}

on:
  workflow_call:
    inputs:
      account:
        type: string
        required: true
      ansible_var_file:
        type: string
        required: true
      region:
        type: string
        required: true
      key_name:
        type: string
        required: true
      branch:
        type: string
        required: true
      project_name:
        type: string
        required: true
      base_role:
        type: string
        required: true
      playbook_role:
        type: string
        required: true
      instance_type:
        type: string
        required: true
      volume_size:
        type: string
        required: true
      asm_key:
        type: string
        required: true

permissions:
  id-token: write
  contents: write

jobs:
  create-ami:
    runs-on: "ubuntu-latest"
    env:
      account: "${{ inputs.account }}"
      ansible_var_file: "${{ inputs.ansible_var_file }}"
      region: "${{ inputs.region }}"
      key_name: "${{ inputs.key_name }}"
      branch: "${{ inputs.branch }}"
      project_name: "${{ inputs.project_name }}"
      base_role: "${{ inputs.base_role }}"
      playbook_role: "${{ inputs.playbook_role }}"
      instance_type: "${{ inputs.instance_type }}"
      volume_size: "${{ inputs.volume_size }}"
      asm_key: "${{ inputs.asm_key }}"

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: "${{ env.branch }}"

      - name: Checkout tools repo
        uses: actions/checkout@v4
        with:
          repository: nationalarchives/ds-github-actions
          path: .

#      - name: set ansible var file for dev
#        run: |
#          echo "ANSIBLE_VAR_FILE=${{ env.ansible_var_file }}" >> $GITHUB_ENV
#          echo "SSH_KEY_FILE=${{ env.key_name }}" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "${{ env.region }}"
          role-to-assume: "${{ env.base_role }}"
          output-credentials: true

      - name: download key file
        uses: keithweaver/aws-s3-github-action@v1.0.0
        with:
          command: cp
          source: s3://ds-${{ env.account }}-kpf-administration/mysql/${{ env.key_name }}
          destination: ${{ env.key_name }}
          aws_access_key_id: ${{ steps.creds.outputs.aws-access-key-id }}
          aws_secret_access_key: ${{ steps.creds.outputs.aws-secret-access-key }}
          aws_session_token: ${{ steps.creds.outputs.aws-session-token }}
          aws_region: ${{ env.region }}

      - name: install python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: '**/mysql-ami-build-req.txt'
      - run: |
          pip install -r ${{ github.workspace }}/ds-github-actions/.github/workflows/mysql-ami-build-req.txt

      - name: run ansible playbook
        env:
          VPC_ID: ${{ secrets.VPC_ID }}
          SUBNET_ID: ${{ secrets.SUBNET_ID }}
        run: |
          cur_dir=$(pwd)
          cd $cur_dir/ansible-playbooks/databases/mysql-base
          export AWS_ACCESS_KEY_ID=${{ steps.creds.outputs.aws-access-key-id }}
          export AWS_SECRET_ACCESS_KEY=${{ steps.creds.outputs.aws-secret-access-key }}
          export AWS_SESSION_TOKEN=${{ steps.creds.outputs.aws-session-token }}
          export AWS_DEFAULT_REGION=${{ env.region }}
          ansible-playbook \
          --extra-vars "ansible_var_file='${{ env.ansible_var_file }}' \
          project_name='${{ env.project_name }}' \
          key_name='${{ env.key_name }}' \
          role_arn='${{ env.playbook_role }}' \
          asm_key='/infrastructure/credentials/mysql-${{ env.project_name }}' \
          env='${{ env.account }}' \
          region='${{ env.region }}' \
          instance_type='${{ env.instance_type }}' \
          volume_size='${{ env.volume_size }}' \
          asm_key='${{ env.asm_key }}'" \
          --private-key $cur_dir/${{ env.key_name }} \
          mysql-base-playbook.yml
...
