---
name: Nginx Config Deploy

permissions:
  id-token: write
  contents: write

on:
  workflow_call:
    inputs:
      deploy-environment:
        type: string
        required: true
      github-environment:
        type: string
        required: true
      account_id:
        type: string
        required: true
      role-to-assume:
        type: string
        required: true
      config-bucket:
        type: string
        required: true
    secrets:
      AWS_ROLE_ARN:
        required: true

jobs:
  terraform-apply-nginx:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      environment: "${{ inputs.deploy-environment }}"
      working-directory: components/terraform
      account_id: "${{ inputs.account_id }}"
      region: eu-west-2
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: eu-west-2
          role-to-assume: "${{ inputs.role-to-assume }}"
          role-session-name: MySessionName

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Checkout
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
      # only use if version freeze is in place
      #            with:
      #              terraform_version: 1.2.7

      - name: Check Python
        run: |
          python --version

      - name: Create Backend S3 Bucket
        run: |
          if 
           aws s3 ls "s3://tna-terraform-backend-state-${{ env.region }}-${{ env.account_id }}" 2>&1 | grep -q 'NoSuchBucket' 
          then 
           aws s3api create-bucket \
              --bucket tna-terraform-backend-state-${{ env.region }}-${{ env.account_id }} \
              --region ${{ env.region }} \
              --create-bucket-configuration LocationConstraint=${{ env.region }}
          
           aws s3api put-public-access-block \
              --bucket tna-terraform-backend-state-${{ env.region }}-${{ env.account_id }} \
              --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"
          else
           echo 'Bucket Already Exists'
          fi

      - name: Copy Environment Vars
        run: |
          echo 'test'
          cp ./var/${{ env.environment }}/terraform/* ./components/terraform/

      - name: Terraform init
        id: init
        run: terraform init -upgrade
        working-directory: ${{ env.working-directory }}

      - name: Terraform apply
        id: apply
        run: terraform apply -target module.nginx_conf
        working-directory: ${{ env.working-directory }}
  prepare:
    runs-on: "ubuntu-latest"
    needs:
      - terraform-apply-nginx
    env:
      region: "eu-west-2"
      branch: "${{ inputs.branch }}"
      deploy_env: "${{ inputs.deploy-environment }}"
      config_bucket: "${{ inputs.config-bucket }}"

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: "${{ env.region }}"

      - name: run prep script
        env:
          DEPLOY_ENV: "${{ env.deploy_env }}"
          CONFIG_BUCKET: "${{ env.config_bucket }}"
        run: |
          mkdir .payload
          aws s3 cp s3://$CONFIG_BUCKET/website/nginx .payload/ --recursive --exclude "*" --include "*.conf"
          echo "version: 0.0" > appspec.yml
          echo "os: linux" >> appspec.yml
          echo "files:" >> appspec.yml
          echo "  - source: '/payload'" >> appspec.yml
          echo "    destination: '/etc/nginx/'" >> appspec.yml
          echo "file_exists_behavior: OVERWRITE" >> appspec.yml
          echo "permissions:" >> appspec.yml
          echo "  - object: '/etc/nginx/*.conf'" >> appspec.yml
          echo "    pattern: '**'" >> appspec.yml
          echo "    owner: root" >> appspec.yml
          echo "    group: root" >> appspec.yml
          echo "    type:" >> appspec.yml
          echo "      - directory" >> appspec.yml
          echo "      - file" >> appspec.yml
          echo "hooks:" >> appspec.yml
          echo "  BeforeInstall:" >> appspec.yml
          echo "  - location: './prep-nginx.sh'" >> appspec.yml
          echo "    timeout: 60" >> appspec.yml
          echo "  ApplicationStop:" >> appspec.yml
          echo "  - location: './deploy-nginx.sh'" >> appspec.yml
          echo "    timeout: 60" >> appspec.yml
          echo "#!/bin/bash" > prep-nginx.sh
          echo "echo 'Starting Nginx Deployment...' > /etc/nginx/nginx_last_test_log.txt" >> prep-nginx.sh
          echo "echo 'If this log is empty, the reload did not run!' >> /etc/nginx/nginx_last_test_log.txt" >> prep-nginx.sh
          echo "echo '' >> /etc/nginx/nginx_last_test_log.txt" >> prep-nginx.sh
          echo "echo 'A log of an nginx test is displayed below:' >> /etc/nginx/nginx_last_test_log.txt" >> prep-nginx.sh
          echo "echo '' >> /etc/nginx/nginx_last_test_log.txt" >> prep-nginx.sh
          echo "#!/bin/bash" > deploy-nginx.sh
          echo "sleep 30" >> deploy-nginx.sh
          echo "nginx -t 2>> /etc/nginx/nginx_last_test_log.txt" >> deploy-nginx.sh
          echo "nginx -s reload" >> deploy-nginx.sh
          echo "chown root:root /etc/nginx/*" >> deploy-nginx.sh
          mkdir deployment
          mv .payload ./deployment/payload
          mv appspec.yml ./deployment/appspec.yml
          mv *.sh ./deployment
          zip -r deployment.zip deployment -x "*.git*"
          aws s3 cp deployment.zip s3://ds-$DEPLOY_ENV-deployment-source/website/website-nginx-conf.zip
  deploy:
    runs-on: "ubuntu-latest"
    needs:
      - prepare
    env:
      user: "${{ github.actor }}"
      deploy_env: "${{ inputs.deploy-environment }}"
      region: "eu-west-2"
    environment: "${{ inputs.github-environment }}"
    steps:
      - name: Checkout ds-github-actions
        uses: actions/checkout@v3
        with:
          repository: nationalarchives/ds-github-actions

      - name: copy script
        run: |
          cp scripts/requirements-aws-cli.txt .

      - name: Install AWS CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: '**/requirements-aws-cli.txt'

      - name: Install python dependencies
        run: |
          pip install -r scripts/requirements-aws-cli.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: "${{ env.region }}"

      - name: Deploy
        env:
          user: "${{ env.user }}"
          deploy_env: "${{ env.deploy_env }}"
        run: |
          echo deploying for $user...
          aws deploy create-deployment --application-name nginx-rp --deployment-config-name nginx-rp --deployment-group-name nginx-rp-group --s3-location bucket=ds-$deploy_env-deployment-source,bundleType=zip,key=website/website-nginx-conf.zip
