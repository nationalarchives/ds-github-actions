---
name: Nginx Config Deployment

on:
  workflow_call:
    inputs:
      deploy-repo:
        type: string
        required: true
      deploy-environment:
        type: string
        required: true
      github-environment:
        type: string
        required: true
      branch:
        type: string
        required: false
        default: ""
    secrets:
      AWS_ROLE_ARN:
        required: true

permissions:
  id-token: write
  contents: write
jobs:
  prepare:
    runs-on: "ubuntu-latest"
    env:
      region: "eu-west-2"
      branch: "${{ inputs.branch }}"
      repo: "${{ inputs.deploy-repo }}"
      deploy_env: "${{ inputs.deploy-environment }}"

    steps:
      - name: checkout repo with branch
        uses: actions/checkout@v3
        with:
          ref: ${{ env.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: "${{ env.region }}"

      - name: run prep script
        env:
          REPO_NAME: "${{ env.repo }}"
          DEPLOY_ENV: "${{ env.deploy_env }}"
        run: |
          mkdir .payload
          aws s3 cp s3://ds-$DEPLOY_ENV-wp-deployment-v2/website/nginx/nginx.conf nginx.conf
          mv ./nginx.conf .payload/nginx.conf
          echo "version: 0.0" > appspec.yml
          echo "os: linux" >> appspec.yml
          echo "files:" >> appspec.yml
          echo "  - source: '/payload'" >> appspec.yml
          echo "    destination: '/etc/nginx/'" >> appspec.yml
          echo "file_exists_behavior: OVERWRITE" >> appspec.yml
          echo "permissions:" >> appspec.yml
          echo "  - object: '/etc/nginx/nginx.conf'" >> appspec.yml
          echo "    pattern: '**'" >> appspec.yml
          echo "    owner: root" >> appspec.yml
          echo "    group: root" >> appspec.yml
          echo "    type:" >> appspec.yml
          echo "      - directory" >> appspec.yml
          echo "      - file" >> appspec.yml
          echo "hooks:" >> appspec.yml
          echo "  BeforeInstall:" >> appspec.yml
          echo "  - location: './prep-nginx.sh'" >> appspec.yml
          echo "    timeout: 60" >> appspec.yml
          echo "  - AfterInstall:" >> appspec.yml
          echo "    location: './permissions.sh'" >> appspec.yml
          echo "    timeout: 60" >> appspec.yml
          echo "#!/bin/bash" > prep-nginx.sh
          echo "nginx -t > /etc/nginx/nginx_last_test_log.txt" >> prep-nginx.sh
          echo "nginx -s reload" >> prep-nginx.sh
          echo "#!/bin/bash" > permissions.sh
          echo "chown root:root /etc/nginx/*" >> permissions.sh
          mkdir deployment
          mv ./payload ./deployment/payload
          mv appspec.yml ./deployment/appspec.yml
          zip -r deployment.zip deployment -x "*.git*"
          aws s3 cp deployment.zip s3://ds-$DEPLOY_ENV-deployment-source/website/$REPO_NAME-nginx-conf.zip
  deploy:
    runs-on: "ubuntu-latest"
    needs:
      - prepare
    env:
      user: "${{ github.actor }}"
      repo: "${{ inputs.deploy-repo }}"
      deploy_env: "${{ inputs.deploy-environment }}"
      region: "eu-west-2"
    environment: "${{ inputs.github-environment }}"
    steps:
      - name: Checkout ds-github-actions
        uses: actions/checkout@v3
        with:
          repository: nationalarchives/ds-github-actions

      - name: copy script
        env:
          repo: "${{ env.repo }}"
        run: |
          cp scripts/requirements-aws-cli.txt .

      - name: Install AWS CLI
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: '**/requirements-aws-cli.txt'

      - name: Install python dependencies
        run: |
          pip install -r scripts/requirements-aws-cli.txt

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: "${{ env.region }}"

      - name: Deploy
        env:
          user: "${{ env.user }}"
          deploy_env: "${{ env.deploy_env }}"
          repo: "${{ env.repo }}"
        run: |
          echo deploying for $user...
          aws deploy create-deployment --application-name nginx-rp --deployment-config-name nginx-rp --deployment-group-name nginx-rp-group --s3-location bucket=ds-$deploy_env-deployment-source,bundleType=zip,key=website/$repo-nginx-conf.zip
...
