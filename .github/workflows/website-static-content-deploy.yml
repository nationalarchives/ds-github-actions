---
name: Website Static Content Deployment

on:
  workflow_call:
    inputs:
      base_role:
        type: string
        required: true
      playbook_role:
        type: string
        required: true
      region:
        type: string
        required: true
      account:
        type: string
        required: true
      repo:
        type: string
        required: true
      release:
        type: string
        required: false
        default: ""
      branch:
        type: string
        required: false
        default: ""
      target-dir:
        type: string
        required: true
        default: ""

permissions:
  id-token: write
  contents: write
jobs:
  prepare:
    runs-on: "ubuntu-latest"

    steps:
      - name: checkout repo with release
        if: "${{ inputs.release != '' }}"
        uses: actions/checkout@v4
        with:
          ref: "${{ inputs.release }}"

      - name: checkout repo with branch
        if: "${{ inputs.release == '' }}"
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Configure AWS Credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "${{ inputs.region }}"
          role-to-assume: "${{ inputs.base_role }}"
          output-credentials: true

      - name: run prep script
        env:
          REPO_NAME: "${{ inputs.repo }}"
          DEPLOY_ENV: "${{ inputs.account }}"
        run: |
          mkdir .payload
          mv * .payload
          mv .payload payload
          echo "version: 0.0" > appspec.yml
          echo "os: linux" >> appspec.yml
          echo "files:" >> appspec.yml
          echo "  - source: '/payload'" >> appspec.yml
          echo "    destination: '/var/nationalarchives.gov.uk/${{ inputs.target-dir }}'" >> appspec.yml
          echo "file_exists_behavior: OVERWRITE" >> appspec.yml
          echo "permissions:" >> appspec.yml
          echo "  - object: '/var/nationalarchives.gov.uk/${{ inputs.target-dir }}'" >> appspec.yml
          echo "    pattern: '**'" >> appspec.yml
          echo "    owner: nginx" >> appspec.yml
          echo "    group: nginx" >> appspec.yml
          echo "    type:" >> appspec.yml
          echo "      - directory" >> appspec.yml
          echo "      - file" >> appspec.yml
          echo "hooks:" >> appspec.yml
          echo "  BeforeInstall:" >> appspec.yml
          echo "  - location: './prep-env.sh'" >> appspec.yml
          echo "    timeout: 60" >> appspec.yml
          echo "  - AfterInstall:" >> appspec.yml
          echo "    location: './permissions.sh'" >> appspec.yml
          echo "    timeout: 60" >> appspec.yml
          echo "#!/bin/bash" > prep-env.sh
          echo "mkdir -p /var/nationalarchives.gov.uk/$REPO_NAME" >> prep-env.sh
          echo "#!/bin/bash" > permissions.sh
          echo "chown nginx:nginx /var/nationalarchives.gov.uk/${{ inputs.target-dir }}" >> permissions.sh
          echo "rm -f /opt/codedeploy-agent/deployment-root/deployment-instructions/*-cleanup" >> permissions.sh
          cd ..
          zip -r $REPO_NAME.zip $REPO_NAME -x "*.git*"
          aws s3 cp $REPO_NAME.zip s3://ds-$DEPLOY_ENV-deployment-source/website/static-content/$REPO_NAME.zip

  deploy:
    runs-on: "ubuntu-latest"
    needs:
      - prepare
    env:
      user: "${{ github.actor }}"
      repo: "${{ inputs.repo }}"
      deploy_env: "${{ inputs.account }}"
      region: "${{ inputs.region }}"
    environment: "${{ inputs.github-environment }}"
    steps:
      - name: Checkout ds-github-actions
        uses: actions/checkout@v4
        with:
          repository: nationalarchives/ds-github-actions

      - name: copy script
        env:
          repo: "${{ inputs.repo }}"
        run: |
          cp scripts/requirements-aws-cli.txt .

      - name: Install AWS CLI
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: '**/requirements-aws-cli.txt'

      - name: Install python dependencies
        run: |
          pip install -r scripts/requirements-aws-cli.txt

      - name: Configure AWS Credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: "${{ inputs.region }}"
          role-to-assume: "${{ inputs.base_role }}"
          output-credentials: true

      - name: Deploy
        env:
          user: "${{ env.user }}"
          deploy_env: "${{ inputs.account }}"
          repo: "${{ inputs.repo }}"
        run: |
          echo deploying for $user...
          aws deploy create-deployment --application-name website-rp-static --deployment-config-name website-rp-static --deployment-group-name nginx-rp --s3-location bucket=ds-$deploy_env-deployment-source,bundleType=zip,key=website/static-content/$repo.zip | tee id.txt
          x=$(cut id.txt -d '"' -f 4 -s)
          echo "Waiting for successful deployment..."
          aws deploy wait deployment-successful --deployment-id $x
          echo "Successfully deployed!"
...
